import re
import tempfile
import zipfile
from pathlib import Path

from bs4 import BeautifulSoup


def extract_number(name):
    match = re.search(r'(\d+)', name.stem)
    return int(match.group(1)) if match else 0


def rename_images_to_match_html(images_dir_path, converted_zip_path):
    if not images_dir_path:
        print("‚ö†Ô∏è –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        return
    images_dir = Path(images_dir_path)
    converted_zip = Path(converted_zip_path)

    if not images_dir.exists():
        print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {images_dir}")
        return
    if not converted_zip.exists():
        print(f"‚ö†Ô∏è –ê—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {converted_zip}")
        return

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è HTML
    with tempfile.TemporaryDirectory() as tmp_dir:
        tmp_dir = Path(tmp_dir)
        with zipfile.ZipFile(converted_zip, 'r') as zip_ref:
            zip_ref.extractall(tmp_dir)

        # –ò—â–µ–º HTML-—Ñ–∞–π–ª –≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–º –∞—Ä—Ö–∏–≤–µ
        html_files = list(tmp_dir.glob("*.html"))
        if not html_files:
            print("‚ùå HTML-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ")
            return

        html_file = html_files[0]

        # –ß—Ç–µ–Ω–∏–µ HTML
        with open(html_file, 'r', encoding='utf-8') as f:
            soup = BeautifulSoup(f, 'html.parser')

        img_tags = soup.find_all('img')

        # –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –∏–º–µ–Ω–∞ –∏–∑ HTML (—Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏) –∏ –£–ù–ò–ö–ê–õ–¨–ù–´–ï –∏–º–µ–Ω–∞
        html_image_names_all = [Path(tag['src']).name for tag in img_tags if tag.get('src')]
        html_image_names_unique = list(dict.fromkeys(html_image_names_all))  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫

        # –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        local_images = sorted(images_dir.glob("*.jpg"),
                              key=extract_number)  # –±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –±—É–¥–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è

        if len(local_images) != len(html_image_names_unique):
            local_image_names = [img.name for img in local_images]
            print("\n‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –£–ù–ò–ö–ê–õ–¨–ù–´–• –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")

            print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ HTML: {len(html_image_names_unique)}")
            print("–°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ HTML:")
            for i, name in enumerate(html_image_names_unique, 1):
                print(f"{i:3d}. {name}")

            print(f"\nüìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ images/: {len(local_images)}")
            print("–°–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
            for i, name in enumerate(local_image_names, 1):
                print(f"{i:3d}. {name}")

            # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —Å–ø–∏—Å–∫–∞–º–∏
            html_set = set(html_image_names_unique)
            local_set = set(local_image_names)

            missing_in_local = html_set - local_set
            extra_in_local = local_set - html_set

            if missing_in_local:
                print("\n–§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ HTML, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ª–æ–∫–∞–ª—å–Ω–æ:")
                for name in sorted(missing_in_local):
                    print(f"- {name}")

            if extra_in_local:
                print("\n–§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ HTML:")
                for name in sorted(extra_in_local):
                    print(f"- {name}")

            print("\n–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return

        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        temp_names = []
        for i, img_path in enumerate(local_images):
            temp_name = img_path.with_name(f"__temp_{i}.jpg")
            img_path.rename(temp_name)
            temp_names.append(temp_name)

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ –ø–æ—Ä—è–¥–∫—É
        for temp_path, final_name in zip(temp_names, html_image_names_unique):
            new_path = images_dir / final_name
            temp_path.rename(new_path)

        print("\n‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–¥ html –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
