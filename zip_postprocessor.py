import re
import shutil
import tempfile
import zipfile
from pathlib import Path

from bs4 import BeautifulSoup

from constants import TEMP_DIR


def extract_number(name):
    match = re.search(r'(\d+)', name.stem)
    return int(match.group(1)) if match else 0


def rename_images_to_match_html(images_dir_path, converted_zip_path):
    if not images_dir_path:
        print("‚ö†Ô∏è –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        return
    images_dir = Path(images_dir_path)
    converted_zip_path = Path(converted_zip_path)

    if not images_dir.exists():
        print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {images_dir}")
        return
    if not converted_zip_path.exists():
        print(f"‚ö†Ô∏è –ê—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {converted_zip_path}")
        return

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è HTML
    with tempfile.TemporaryDirectory() as tmp_dir:
        tmp_dir = Path(tmp_dir)
        with zipfile.ZipFile(converted_zip_path, 'r') as zip_ref:
            zip_ref.extractall(tmp_dir)

        # –ò—â–µ–º HTML-—Ñ–∞–π–ª –≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–º –∞—Ä—Ö–∏–≤–µ
        html_files = list(tmp_dir.glob("*.html"))
        if not html_files:
            print("‚ùå HTML-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ")
            return

        html_file = html_files[0]

        # –ß—Ç–µ–Ω–∏–µ HTML
        with open(html_file, 'r', encoding='utf-8') as f:
            soup = BeautifulSoup(f, 'html.parser')

        img_tags = soup.find_all('img')
        html_image_names = [Path(tag['src']).name for tag in img_tags if tag.get('src')]

        # print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ HTML: {len(html_image_names)}")

        # –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        local_images = sorted(images_dir.glob("*.jpg"), key=extract_number)
        # print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ images/: {len(local_images)}")

        if len(local_images) != len(html_image_names):
            print("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return

        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        temp_names = []
        for i, img_path in enumerate(local_images):
            temp_name = img_path.with_name(f"__temp_{i}.jpg")
            img_path.rename(temp_name)
            temp_names.append(temp_name)

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ –ø–æ—Ä—è–¥–∫—É
        for temp_path, final_name in zip(temp_names, html_image_names):
            new_path = images_dir / final_name
            temp_path.rename(new_path)

        print("‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–¥ html –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


def remove_google_redirects(html_content):
    """–£–¥–∞–ª—è–µ—Ç Google-—Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –∏–∑ HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    return re.sub(
        r'https?://www\.google\.com/url\?q=([^&]+)&[^"]+',
        lambda m: m.group(1),
        html_content
    )


def process_code_sections(html_content):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–ª–æ–∫–∏ –∫–æ–¥–∞, –∑–∞–º–µ–Ω—è—è text-indent –∏ margin-left –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–æ–±–∞–≤–ª—è—è –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å—Ç—Ä–æ–∫"""
    soup = BeautifulSoup(html_content, 'html.parser')
    start_markers, end_markers = _find_code_markers(soup)

    _validate_markers(start_markers, end_markers)

    for start, end in zip(start_markers, end_markers):
        code_content = _collect_code_content(start, end)
        _process_code_elements(code_content)
        code_block = _create_code_block(soup, code_content)

        _replace_with_code_block(start, end, code_block)

    return str(soup)


def _find_code_markers(soup):
    """–ù–∞—Ö–æ–¥–∏—Ç –º–∞—Ä–∫–µ—Ä—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –∫–æ–¥–∞ –≤ HTML"""
    start_markers = soup.find_all(lambda tag:
                                  tag.name == 'p' and
                                  'START_CODE_SECTION_7239' in tag.get_text())
    end_markers = soup.find_all(lambda tag:
                                tag.name == 'p' and
                                'END_CODE_SECTION_7239' in tag.get_text())
    return start_markers, end_markers


def _validate_markers(start_markers, end_markers):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–∞—Ä–∫–µ—Ä—ã –∫–æ–¥–∞ –ø–∞—Ä–Ω—ã–µ"""
    if len(start_markers) != len(end_markers):
        raise ValueError("–ù–µ–ø–∞—Ä–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∫–æ–¥–∞")


def _collect_code_content(start_marker, end_marker):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–∂–¥—É –º–∞—Ä–∫–µ—Ä–∞–º–∏ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –∫–æ–¥–∞"""
    code_content = []
    current = start_marker.next_sibling

    while current and current != end_marker:
        code_content.append(current)
        current = current.next_sibling

    return code_content


def _process_code_elements(code_content):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–¥–∞, –∑–∞–º–µ–Ω—è—è –æ—Ç—Å—Ç—É–ø—ã –Ω–∞ –ø—Ä–æ–±–µ–ª—ã"""
    for element in code_content:
        if element.name == 'p' and element.get('style', ''):
            styles = element['style'].split(';')
            new_styles, indent_size = _process_styles(styles)

            if indent_size > 0:
                element['style'] = ';'.join(new_styles).strip(';')
                _apply_indent_to_element(element, indent_size)


def _process_styles(styles):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞, –≤—ã—á–∏—Å–ª—è—è –æ–±—â–∏–π –æ—Ç—Å—Ç—É–ø"""
    new_styles = []
    indent_size = 0

    for style in styles:
        style = style.strip()
        if not style:
            continue

        if 'text-indent' in style:
            indent_size += _parse_style_value(style)
        elif 'margin-left' in style:
            indent_size += _parse_style_value(style)
        else:
            new_styles.append(style)

    return new_styles, indent_size


def _parse_style_value(style):
    """–ü–∞—Ä—Å–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤"""
    try:
        value = style.split(':')[1].strip()
        if 'pt' in value:
            pt_value = float(value.replace('pt', ''))
            return int(pt_value / 9)
        elif 'em' in value:
            em_value = float(value.replace('em', ''))
            return int(em_value * 4)
        elif 'px' in value:
            px_value = float(value.replace('px', ''))
            return int(px_value / 9)
        elif 'cm' in value:
            cm_value = float(value.replace('cm', ''))
            return int(cm_value * 28.35 / 9)
        else:
            return int(float(value) / 9)
    except (ValueError, IndexError):
        return 0


def _apply_indent_to_element(element, indent_size):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º"""
    indent = ' ' * indent_size

    for content in element.contents:
        if isinstance(content, str) and content.strip():
            content.replace_with(indent + content)
            return

    first_span = element.find('span')
    if first_span and first_span.string:
        first_span.string.replace_with(indent + first_span.string)


def _create_code_block(soup, code_content):
    """–°–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π —Å—Ç—Ä–æ–∫"""
    new_div = soup.new_tag('div', **{
        'class': 'code-block',
        'style': 'white-space: pre; font-family: monospace;'
    })

    for i, content in enumerate(code_content, 1):
        line_div = soup.new_tag('div', **{'class': 'line'})
        line_div.append(content)
        new_div.append(line_div)

    return new_div


def _replace_with_code_block(start_marker, end_marker, code_block):
    """–ó–∞–º–µ–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤—ã–º –±–ª–æ–∫–æ–º –∫–æ–¥–∞"""
    start_marker.insert_before(code_block)

    current = start_marker
    while current and current != end_marker:
        next_node = current.next_sibling
        current.decompose()
        current = next_node

    if end_marker:
        end_marker.decompose()


def prepare_html(html_path):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTML"""
    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    with open(html_path, 'r', encoding='utf-8') as file:
        html_content = file.read()

    # –û—á–∏—Å—Ç–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –æ—Ç Google
    html_content = remove_google_redirects(html_content)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
    html_content = process_code_sections(html_content)

    # –ó–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
    with open(html_path, 'w', encoding='utf-8') as file:
        file.write(html_content)


def prepare_upload_folder(converted_zip_path, images_dir, word_path):
    upload_folder = Path(TEMP_DIR / 'upload_folder')
    if upload_folder.exists():
        shutil.rmtree(upload_folder)
    upload_folder.mkdir()

    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º ZIP –≤ upload_folder
    with zipfile.ZipFile(converted_zip_path, 'r') as zip_ref:
        zip_ref.extractall(upload_folder)

    # –ò—â–µ–º HTML-—Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –µ–≥–æ
    html_files = list(upload_folder.glob('*.html'))
    if not html_files:
        raise FileNotFoundError("HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–º –∞—Ä—Ö–∏–≤–µ")

    original_html_name = Path(word_path).stem + '.html'
    original_html_path = upload_folder / original_html_name
    html_files[0].rename(original_html_path)

    upload_zip_path = None

    # –ï—Å–ª–∏ images_dir —É–∫–∞–∑–∞–Ω –∏ –≤ –Ω—ë–º –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî —Å–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤
    if images_dir and Path(images_dir).exists():
        image_files = list(Path(images_dir).glob('*'))
        if image_files:
            # –°–æ–∑–¥–∞—ë–º images/ –≤ –ø–∞–ø–∫–µ upload_folder
            images_folder = upload_folder / 'images'
            images_folder.mkdir(exist_ok=True)

            for img_path in image_files:
                shutil.copy(img_path, images_folder / img_path.name)

            # ‚úÖ –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤ upload.zip —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
            upload_zip_path = upload_folder / 'upload.zip'
            with zipfile.ZipFile(upload_zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for img_file in images_folder.glob('*'):
                    arcname = img_file.name
                    zipf.write(img_file, arcname)

    print(f"üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
    print(f"üìù HTML: {original_html_path}")
    if upload_zip_path:
        print(f"üóÇÔ∏è ZIP:  {upload_zip_path}")
    else:
        print("‚ÑπÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç ‚Äî zip –∞—Ä—Ö–∏–≤ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª—Å—è")

    prepare_html(original_html_path)
    return str(original_html_path), str(upload_zip_path) if upload_zip_path else None, upload_folder
