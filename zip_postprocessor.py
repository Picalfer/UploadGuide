import re
import shutil
import tempfile
import zipfile
from pathlib import Path

from bs4 import BeautifulSoup

from constants import TEMP_DIR


def extract_number(name):
    match = re.search(r'(\d+)', name.stem)
    return int(match.group(1)) if match else 0


def rename_images_to_match_html(images_dir_path, converted_zip_path):
    if not images_dir_path:
        print("‚ö†Ô∏è –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        return
    images_dir = Path(images_dir_path)
    converted_zip_path = Path(converted_zip_path)

    if not images_dir.exists():
        print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {images_dir}")
        return
    if not converted_zip_path.exists():
        print(f"‚ö†Ô∏è –ê—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {converted_zip_path}")
        return

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è HTML
    with tempfile.TemporaryDirectory() as tmp_dir:
        tmp_dir = Path(tmp_dir)
        with zipfile.ZipFile(converted_zip_path, 'r') as zip_ref:
            zip_ref.extractall(tmp_dir)

        # –ò—â–µ–º HTML-—Ñ–∞–π–ª –≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–º –∞—Ä—Ö–∏–≤–µ
        html_files = list(tmp_dir.glob("*.html"))
        if not html_files:
            print("‚ùå HTML-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ")
            return

        html_file = html_files[0]

        # –ß—Ç–µ–Ω–∏–µ HTML
        with open(html_file, 'r', encoding='utf-8') as f:
            soup = BeautifulSoup(f, 'html.parser')

        img_tags = soup.find_all('img')
        html_image_names = [Path(tag['src']).name for tag in img_tags if tag.get('src')]

        # print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ HTML: {len(html_image_names)}")

        # –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        local_images = sorted(images_dir.glob("*.jpg"), key=extract_number)
        # print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ images/: {len(local_images)}")

        if len(local_images) != len(html_image_names):
            print("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return

        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        temp_names = []
        for i, img_path in enumerate(local_images):
            temp_name = img_path.with_name(f"__temp_{i}.jpg")
            img_path.rename(temp_name)
            temp_names.append(temp_name)

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ –ø–æ—Ä—è–¥–∫—É
        for temp_path, final_name in zip(temp_names, html_image_names):
            new_path = images_dir / final_name
            temp_path.rename(new_path)

        print("‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–¥ html –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


def remove_google_redirects(html_content):
    """–£–¥–∞–ª—è–µ—Ç Google-—Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –∏–∑ HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    return re.sub(
        r'https?://www\.google\.com/url\?q=([^&]+)&[^"]+',
        lambda m: m.group(1),
        html_content
    )


def process_code_sections(html_content):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–ª–æ–∫–∏ –∫–æ–¥–∞, –∑–∞–º–µ–Ω—è—è text-indent –∏ margin-left –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–æ–±–∞–≤–ª—è—è –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å—Ç—Ä–æ–∫"""
    soup = BeautifulSoup(html_content, 'html.parser')

    # –ù–∞—Ö–æ–¥–∏–º –º–∞—Ä–∫–µ—Ä—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –∫–æ–¥–∞
    start_markers = soup.find_all(lambda tag:
                                  tag.name == 'p' and
                                  'START_CODE_SECTION_7239' in tag.get_text())
    end_markers = soup.find_all(lambda tag:
                                tag.name == 'p' and
                                'END_CODE_SECTION_7239' in tag.get_text())

    if len(start_markers) != len(end_markers):
        raise ValueError("–ù–µ–ø–∞—Ä–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∫–æ–¥–∞")

    for start, end in zip(start_markers, end_markers):
        code_content = []
        current = start.next_sibling

        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞ –∫–æ–¥–∞
        while current and current != end:
            code_content.append(current)
            current = current.next_sibling

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ –∫–æ–¥–∞
        for element in code_content:
            if element.name == 'p' and element.get('style', ''):
                styles = element['style'].split(';')
                new_styles = []
                indent_size = 0

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏
                for style in styles:
                    style = style.strip()
                    if not style:
                        continue

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ text-indent
                    if 'text-indent' in style:
                        try:
                            # –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä "36pt" –∏–ª–∏ "2em")
                            value = style.split(':')[1].strip()
                            if 'pt' in value:
                                pt_value = float(value.replace('pt', ''))
                                indent_size += int(pt_value / 9)  # –ü—Ä–∏–º–µ—Ä–Ω–æ 4 –ø—Ä–æ–±–µ–ª–∞ –¥–ª—è 36pt
                            elif 'em' in value:
                                em_value = float(value.replace('em', ''))
                                indent_size += int(em_value * 4)  # –ü—Ä–∏–º–µ—Ä–Ω–æ 4 –ø—Ä–æ–±–µ–ª–∞ –Ω–∞ 1em
                            elif 'px' in value:
                                px_value = float(value.replace('px', ''))
                                indent_size += int(px_value / 9)  # –≠–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
                            else:
                                # –ï—Å–ª–∏ –Ω–µ—Ç –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è, —Å—á–∏—Ç–∞–µ–º –ø–∏–∫—Å–µ–ª—è–º–∏
                                indent_size += int(float(value) / 9)
                        except (ValueError, IndexError):
                            pass

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ margin-left
                    elif 'margin-left' in style:
                        try:
                            value = style.split(':')[1].strip()
                            if 'pt' in value:
                                pt_value = float(value.replace('pt', ''))
                                indent_size += int(pt_value / 9)
                            elif 'em' in value:
                                em_value = float(value.replace('em', ''))
                                indent_size += int(em_value * 4)
                            elif 'px' in value:
                                px_value = float(value.replace('px', ''))
                                indent_size += int(px_value / 9)
                            elif 'cm' in value:
                                cm_value = float(value.replace('cm', ''))
                                indent_size += int(cm_value * 28.35 / 9)  # 1cm ‚âà 28.35pt
                            else:
                                # –ï—Å–ª–∏ –Ω–µ—Ç –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è, —Å—á–∏—Ç–∞–µ–º –ø–∏–∫—Å–µ–ª—è–º–∏
                                indent_size += int(float(value) / 9)
                        except (ValueError, IndexError):
                            pass
                    else:
                        new_styles.append(style)

                if indent_size > 0:
                    element['style'] = ';'.join(new_styles).strip(';')
                    indent = ' ' * indent_size

                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –∫ –ø–µ—Ä–≤–æ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                    for content in element.contents:
                        if isinstance(content, str) and content.strip():
                            content.replace_with(indent + content)
                            break
                    else:
                        first_span = element.find('span')
                        if first_span and first_span.string:
                            first_span.string.replace_with(indent + first_span.string)

        # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –∫–æ–¥–∞ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π —Å—Ç—Ä–æ–∫ –∏ CSS –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤
        new_div = soup.new_tag('div', **{
            'class': 'code-block',
            'style': 'white-space: pre; font-family: monospace;'  # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã
        })

        for i, content in enumerate(code_content, 1):
            line_div = soup.new_tag('div', **{'class': 'line'})
            line_div.append(content)
            new_div.append(line_div)

        start.insert_before(new_div)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        current = start
        while current and current != end:
            next_node = current.next_sibling
            current.decompose()
            current = next_node

        if end:
            end.decompose()

    return str(soup)


def prepare_html(html_path):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTML"""
    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    with open(html_path, 'r', encoding='utf-8') as file:
        html_content = file.read()

    # –û—á–∏—Å—Ç–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –æ—Ç Google
    html_content = remove_google_redirects(html_content)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
    html_content = process_code_sections(html_content)

    # –ó–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
    with open(html_path, 'w', encoding='utf-8') as file:
        file.write(html_content)


def prepare_upload_folder(converted_zip_path, images_dir, word_path):
    upload_folder = Path(TEMP_DIR / 'upload_folder')
    if upload_folder.exists():
        shutil.rmtree(upload_folder)
    upload_folder.mkdir()

    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º ZIP –≤ upload_folder
    with zipfile.ZipFile(converted_zip_path, 'r') as zip_ref:
        zip_ref.extractall(upload_folder)

    # –ò—â–µ–º HTML-—Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –µ–≥–æ
    html_files = list(upload_folder.glob('*.html'))
    if not html_files:
        raise FileNotFoundError("HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–º –∞—Ä—Ö–∏–≤–µ")

    original_html_name = Path(word_path).stem + '.html'
    original_html_path = upload_folder / original_html_name
    html_files[0].rename(original_html_path)

    upload_zip_path = None

    # –ï—Å–ª–∏ images_dir —É–∫–∞–∑–∞–Ω –∏ –≤ –Ω—ë–º –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî —Å–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤
    if images_dir and Path(images_dir).exists():
        image_files = list(Path(images_dir).glob('*'))
        if image_files:
            # –°–æ–∑–¥–∞—ë–º images/ –≤ –ø–∞–ø–∫–µ upload_folder
            images_folder = upload_folder / 'images'
            images_folder.mkdir(exist_ok=True)

            for img_path in image_files:
                shutil.copy(img_path, images_folder / img_path.name)

            # ‚úÖ –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤ upload.zip —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
            upload_zip_path = upload_folder / 'upload.zip'
            with zipfile.ZipFile(upload_zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for img_file in images_folder.glob('*'):
                    arcname = img_file.name
                    zipf.write(img_file, arcname)

    print(f"üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
    print(f"üìù HTML: {original_html_path}")
    if upload_zip_path:
        print(f"üóÇÔ∏è ZIP:  {upload_zip_path}")
    else:
        print("‚ÑπÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç ‚Äî zip –∞—Ä—Ö–∏–≤ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª—Å—è")

    prepare_html(original_html_path)
    return str(original_html_path), str(upload_zip_path) if upload_zip_path else None, upload_folder
