import json
import os
from typing import Dict, Tuple

import requests

import constants
from utils import get_resource_path

API_CONFIG_PATH = get_resource_path("api_config.txt")


def load_auth_config(config_path: str = API_CONFIG_PATH) -> Tuple[str, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∏–∑ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(config_path):
        raise FileNotFoundError(f"–ö–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")

    with open(config_path, 'r') as f:
        lines = [line.strip() for line in f.readlines() if line.strip()]

    if len(lines) < 2:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–∞. –ù—É–∂–Ω—ã: –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å")

    return lines[0], lines[1]


def upload_guide(
        html_path: str,
        level_id: int,
        title: str,
        config_path: str = API_CONFIG_PATH,
        order: int = 0,
        zip_path: str = None
) -> Dict:
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (zip-–∞—Ä—Ö–∏–≤ –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω)"""
    if not os.path.exists(html_path):
        raise FileNotFoundError(f"HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {html_path}")

    if zip_path and not os.path.exists(zip_path):
        raise FileNotFoundError(f"ZIP –∞—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {zip_path}")

    auth = load_auth_config(config_path)
    files = {}

    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        files['html_file'] = open(html_path, 'rb')
        if zip_path:
            files['assets_zip'] = open(zip_path, 'rb')

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = {
            'level_id': level_id,
            'title': title,
            'order': order
        }

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(
            url=constants.API_GUIDE_UPLOAD,
            files=files,
            data=data,
            auth=auth,
            timeout=30  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
        )

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"üîç Status Code: {response.status_code}")
        print(f"üîç Response Headers: {dict(response.headers)}")

        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç —Å–Ω–∞—á–∞–ª–∞
        response_text = response.text
        print(f"üîç Response Preview: {response_text[:500]}...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        # –£—Å–ø–µ—à–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: 200 (OK), 201 (Created), 204 (No Content)
        if response.status_code in [200, 201, 204]:
            try:
                return response.json()
            except json.JSONDecodeError as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç: {e}")
                print(f"‚ö†Ô∏è –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_text}")
                raise Exception("‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
        elif response.status_code == 401:
            raise Exception("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        elif response.status_code == 403:
            raise Exception("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏")
        elif response.status_code == 404:
            raise Exception("‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –∏–ª–∏ endpoint")
        elif response.status_code >= 400:
            raise Exception(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response_text[:200]}")

        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω—ã–π
        try:
            return response.json()
        except json.JSONDecodeError as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç: {e}")
            print(f"‚ö†Ô∏è –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_text}")
            raise Exception("‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")

    except requests.exceptions.ConnectionError:
        raise Exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ URL")
    except requests.exceptions.Timeout:
        raise Exception("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
    except requests.exceptions.RequestException as e:
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
    finally:
        # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        for file in files.values():
            try:
                file.close()
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: {e}")
