import os
from typing import Dict, Callable

import constants
from utils import Status
from .guide_uploader import upload_guide  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
from .level_cache import save_last_level, load_next_order


def get_available_courses(api_url: str) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∏ —É—Ä–æ–≤–Ω–µ–π"""
    response = requests.get(api_url)
    response.raise_for_status()
    return response.json()


def select_level_interactive(courses_data: Dict, app, callback: Callable[[int], None]):
    def on_selected(level_id: int):
        callback(level_id)

    app.ask_level_selection(courses_data, on_selected)


import requests
from typing import Dict, Optional


def get_level_guides(level_id: int, guiders_order_api: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–∏—á–µ–∫ —É—Ä–æ–≤–Ω—è"""
    try:
        response = requests.get(f"{guiders_order_api}{level_id}/")
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException:
        return None


def select_order_interactive(guides_data: Dict, level_id: int) -> int:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ—Ä—è–¥–∫–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–æ–¥–∏—á–µ–∫"""
    print(f"\nüìù –ú–µ—Ç–æ–¥–∏—á–∫–∏ –≤ —É—Ä–æ–≤–Ω–µ '{guides_data['level_title']}':")
    for guide in guides_data['guides']:
        print(f"  {guide['order']}. {guide['title']}")

    next_order = load_next_order()
    max_order = max([g['order'] for g in guides_data['guides']] or [0])

    while True:
        prompt = (
            f"\n–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä (1-{max_order + 1}) "
            f"{'–∏–ª–∏ Enter –¥–ª—è ' + str(next_order) if next_order else ''}: "
        )

        user_input = input(prompt).strip()

        if not user_input and next_order:
            save_last_level(level_id, next_order)
            return next_order
        elif user_input.isdigit():
            order = int(user_input)
            if 1 <= order <= max_order + 1:
                save_last_level(level_id, order)
                return order

        print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {max_order + 1}")


def process_upload_flow(
        app,
        html_path: str,
        assets_zip_path: Optional[str],
        original_zip_path: str,
        auth_config_path: str = 'api_config.txt',
        callback: Optional[Callable[[Optional[Dict]], None]] = None
):
    """–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥ —Ç–µ–∫—É—â–∏–π GUI"""

    def handle_error(error_msg: str, exception: Exception = None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        full_error = f"{error_msg}\n{str(exception) if exception else ''}"
        print(f"‚ùå {error_msg}")
        if exception:
            print(f"üîß –î–µ—Ç–∞–ª–∏: {exception}")

        app.update_status(Status.ERROR)
        if callback:
            callback(None)

    def handle_success(response: Dict, order: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
        success_msg = f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–∫ –º–µ—Ç–æ–¥–∏—á–∫–∞ #{order}!"
        print(success_msg)
        app.update_status(Status.SUCCESS)
        app.mark_step_done("uploaded")  # –û—Ç–º–µ—á–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —ç—Ç–∞–ø
        if callback:
            callback(response)

    try:
        app.update_status(Status.REQUESTING)
        courses_data = get_available_courses(constants.API_COURSES_IDS)

        if not courses_data:
            handle_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤")
            return

        def after_level_selected(level_id: int):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è"""
            try:
                app.update_status(Status.REQUESTING)
                guides_data = get_level_guides(level_id, constants.API_GUIDES_ORDER)

                if not guides_data:
                    handle_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Ç–æ–¥–∏—á–∫–∞—Ö —É—Ä–æ–≤–Ω—è")
                    return

                def after_order_selected(order: int):
                    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Ä—è–¥–∫–∞"""
                    try:
                        title = os.path.splitext(os.path.basename(original_zip_path))[0]

                        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
                        upload_kwargs = {
                            'html_path': html_path,
                            'level_id': level_id,
                            'title': title,
                            'order': order,
                            'config_path': auth_config_path
                        }

                        if assets_zip_path and os.path.exists(assets_zip_path):
                            upload_kwargs['zip_path'] = assets_zip_path
                        else:
                            print("‚ÑπÔ∏è ZIP —Å –∞—Å—Å–µ—Ç–∞–º–∏ –Ω–µ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω")

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–º–µ—á–∞–µ–º —ç—Ç–∞–ø –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
                        app.update_detailed_status(Status.UPLOADING, f"–ó–∞–≥—Ä—É–∑–∫–∞ '{title}'...")
                        app.mark_step_done("upload_prepared")

                        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                        response = upload_guide(**upload_kwargs)
                        handle_success(response, order)

                    except Exception as e:
                        handle_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä", e)

                # –ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –ø–æ—Ä—è–¥–∫–∞
                app.ask_order_selection(guides_data, level_id, after_order_selected)

            except Exception as e:
                handle_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω—è", e)

        # –ó–∞–ø—É—Å–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
        app.ask_level_selection(courses_data, after_level_selected)

    except Exception as e:
        handle_error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏", e)
