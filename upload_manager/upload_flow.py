import os
from typing import Dict, Optional

import requests

from constants import API_COURSES_IDS
from .guide_uploader import upload_guide  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
from .level_cache import save_last_level, load_last_level


def get_available_courses(api_url: str) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∏ —É—Ä–æ–≤–Ω–µ–π"""
    response = requests.get(api_url)
    response.raise_for_status()
    return response.json()


def select_level_interactive(courses_data: Dict) -> int:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π"""
    last_level = load_last_level()

    print("\nüìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã –∏ —É—Ä–æ–≤–Ω–∏:")
    for course in courses_data['courses']:
        print(f"üìò {course['course_title']} (Course ID: {course['course_id']})")
        for level in course['levels']:
            print(f"  ‚îî‚îÄ‚îÄ üìó {level['level_title']} (Level ID: {level['level_id']})")

    while True:
        if last_level:
            prompt = (
                f"\n–í–≤–µ–¥–∏—Ç–µ ID –Ω—É–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è (–∏–ª–∏ 'y' –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è "
                f"–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è {last_level}): "
            )
        else:
            prompt = "\n–í–≤–µ–¥–∏—Ç–µ ID –Ω—É–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è: "

        user_input = input(prompt).strip().lower()

        if user_input == 'y' and last_level:
            return last_level
        elif user_input.isdigit():
            level_id = int(user_input)
            save_last_level(level_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –≤—ã–±–æ—Ä
            return level_id

        print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ ID —É—Ä–æ–≤–Ω—è –∏–ª–∏ 'y'")


def process_upload_flow(
        html_path: str,
        assets_zip_path: str,
        original_zip_path: str,
        courses_api_url: str = API_COURSES_IDS,
        auth_config_path: str = 'api_config.txt'
) -> Optional[Dict]:
    """–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
    try:
        courses_data = get_available_courses(courses_api_url)
        level_id = select_level_interactive(courses_data)

        title = os.path.splitext(os.path.basename(original_zip_path))[0]

        print("\nüîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
        response = upload_guide(
            html_path=html_path,
            zip_path=assets_zip_path,
            level_id=level_id,
            title=title,
            config_path=auth_config_path
        )

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response}")
        return response

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None
